/*
 * generated by Xtext 2.26.0
 */
package hvbargen.meth.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import hvbargen.meth.ide.contentassist.antlr.internal.InternalMethParser;
import hvbargen.meth.services.MethGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MethParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MethGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MethGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDeklarationAccess().getAlternatives(), "rule__Deklaration__Alternatives");
			builder.put(grammarAccess.getDimensionMultiplikationAccess().getOperatorAlternatives_1_1_0(), "rule__DimensionMultiplikation__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getDimensionPrimaryAccess().getAlternatives(), "rule__DimensionPrimary__Alternatives");
			builder.put(grammarAccess.getEinheitAccess().getAlternatives_2(), "rule__Einheit__Alternatives_2");
			builder.put(grammarAccess.getZahlAccess().getAlternatives(), "rule__Zahl__Alternatives");
			builder.put(grammarAccess.getEinheitAdditionAccess().getOperatorAlternatives_1_1_0(), "rule__EinheitAddition__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getEinheitMultiplikationAccess().getOperatorAlternatives_1_1_0(), "rule__EinheitMultiplikation__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getEinheitPrimaryAccess().getAlternatives(), "rule__EinheitPrimary__Alternatives");
			builder.put(grammarAccess.getMethodeAccess().getAblaufAlternatives_5_0(), "rule__Methode__AblaufAlternatives_5_0");
			builder.put(grammarAccess.getFormelAccess().getAlternatives(), "rule__Formel__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getEinheitensystemAccess().getGroup(), "rule__Einheitensystem__Group__0");
			builder.put(grammarAccess.getDimensionAccess().getGroup(), "rule__Dimension__Group__0");
			builder.put(grammarAccess.getDimensionAccess().getGroup_2(), "rule__Dimension__Group_2__0");
			builder.put(grammarAccess.getDimensionMultiplikationAccess().getGroup(), "rule__DimensionMultiplikation__Group__0");
			builder.put(grammarAccess.getDimensionMultiplikationAccess().getGroup_1(), "rule__DimensionMultiplikation__Group_1__0");
			builder.put(grammarAccess.getDimensionPrimaryAccess().getGroup_0(), "rule__DimensionPrimary__Group_0__0");
			builder.put(grammarAccess.getEinheitAccess().getGroup(), "rule__Einheit__Group__0");
			builder.put(grammarAccess.getEinheitAccess().getGroup_2_0(), "rule__Einheit__Group_2_0__0");
			builder.put(grammarAccess.getEinheitAccess().getGroup_2_1(), "rule__Einheit__Group_2_1__0");
			builder.put(grammarAccess.getUmrechnungAccess().getGroup(), "rule__Umrechnung__Group__0");
			builder.put(grammarAccess.getKonstanteAccess().getGroup(), "rule__Konstante__Group__0");
			builder.put(grammarAccess.getEinheitAdditionAccess().getGroup(), "rule__EinheitAddition__Group__0");
			builder.put(grammarAccess.getEinheitAdditionAccess().getGroup_1(), "rule__EinheitAddition__Group_1__0");
			builder.put(grammarAccess.getEinheitMultiplikationAccess().getGroup(), "rule__EinheitMultiplikation__Group__0");
			builder.put(grammarAccess.getEinheitMultiplikationAccess().getGroup_1(), "rule__EinheitMultiplikation__Group_1__0");
			builder.put(grammarAccess.getEinheitPrimaryAccess().getGroup_2(), "rule__EinheitPrimary__Group_2__0");
			builder.put(grammarAccess.getMethodeAccess().getGroup(), "rule__Methode__Group__0");
			builder.put(grammarAccess.getGegebenAccess().getGroup(), "rule__Gegeben__Group__0");
			builder.put(grammarAccess.getEingabeAccess().getGroup(), "rule__Eingabe__Group__0");
			builder.put(grammarAccess.getBerechnungAccess().getGroup(), "rule__Berechnung__Group__0");
			builder.put(grammarAccess.getAusgabeAccess().getGroup(), "rule__Ausgabe__Group__0");
			builder.put(grammarAccess.getGegebenStatementAccess().getGroup(), "rule__GegebenStatement__Group__0");
			builder.put(grammarAccess.getGegebenStatementAccess().getGroup_1(), "rule__GegebenStatement__Group_1__0");
			builder.put(grammarAccess.getEingabeStatementAccess().getGroup(), "rule__EingabeStatement__Group__0");
			builder.put(grammarAccess.getBerechnungStatementAccess().getGroup(), "rule__BerechnungStatement__Group__0");
			builder.put(grammarAccess.getAusgabeStatementAccess().getGroup(), "rule__AusgabeStatement__Group__0");
			builder.put(grammarAccess.getAusgabeStatementAccess().getGroup_1(), "rule__AusgabeStatement__Group_1__0");
			builder.put(grammarAccess.getAusgabeStatementAccess().getGroup_2(), "rule__AusgabeStatement__Group_2__0");
			builder.put(grammarAccess.getModelAccess().getEinheitensystemAssignment_0(), "rule__Model__EinheitensystemAssignment_0");
			builder.put(grammarAccess.getModelAccess().getMethodenAssignment_1(), "rule__Model__MethodenAssignment_1");
			builder.put(grammarAccess.getEinheitensystemAccess().getDeklarationenAssignment_3(), "rule__Einheitensystem__DeklarationenAssignment_3");
			builder.put(grammarAccess.getDimensionAccess().getNameAssignment_1(), "rule__Dimension__NameAssignment_1");
			builder.put(grammarAccess.getDimensionAccess().getBasisAssignment_2_1(), "rule__Dimension__BasisAssignment_2_1");
			builder.put(grammarAccess.getDimensionMultiplikationAccess().getOperatorAssignment_1_1(), "rule__DimensionMultiplikation__OperatorAssignment_1_1");
			builder.put(grammarAccess.getDimensionMultiplikationAccess().getRechtsAssignment_1_2(), "rule__DimensionMultiplikation__RechtsAssignment_1_2");
			builder.put(grammarAccess.getDimensionPrimaryAccess().getRefAssignment_1(), "rule__DimensionPrimary__RefAssignment_1");
			builder.put(grammarAccess.getEinheitAccess().getNameAssignment_1(), "rule__Einheit__NameAssignment_1");
			builder.put(grammarAccess.getEinheitAccess().getRefAssignment_2_0_1(), "rule__Einheit__RefAssignment_2_0_1");
			builder.put(grammarAccess.getEinheitAccess().getFaktorAssignment_2_1_1(), "rule__Einheit__FaktorAssignment_2_1_1");
			builder.put(grammarAccess.getEinheitAccess().getBasiseinheitAssignment_2_1_2(), "rule__Einheit__BasiseinheitAssignment_2_1_2");
			builder.put(grammarAccess.getUmrechnungAccess().getVarnameAssignment_1(), "rule__Umrechnung__VarnameAssignment_1");
			builder.put(grammarAccess.getUmrechnungAccess().getVonEinheitAssignment_2(), "rule__Umrechnung__VonEinheitAssignment_2");
			builder.put(grammarAccess.getUmrechnungAccess().getAusdruckAssignment_4(), "rule__Umrechnung__AusdruckAssignment_4");
			builder.put(grammarAccess.getUmrechnungAccess().getNachEinheitAssignment_5(), "rule__Umrechnung__NachEinheitAssignment_5");
			builder.put(grammarAccess.getKonstanteAccess().getNameAssignment_1(), "rule__Konstante__NameAssignment_1");
			builder.put(grammarAccess.getKonstanteAccess().getAusdruckAssignment_3(), "rule__Konstante__AusdruckAssignment_3");
			builder.put(grammarAccess.getGanzzahlAccess().getIwertAssignment(), "rule__Ganzzahl__IwertAssignment");
			builder.put(grammarAccess.getDezimalzahlAccess().getFwertAssignment(), "rule__Dezimalzahl__FwertAssignment");
			builder.put(grammarAccess.getEinheitAdditionAccess().getOperatorAssignment_1_1(), "rule__EinheitAddition__OperatorAssignment_1_1");
			builder.put(grammarAccess.getEinheitAdditionAccess().getRechtsAssignment_1_2(), "rule__EinheitAddition__RechtsAssignment_1_2");
			builder.put(grammarAccess.getEinheitMultiplikationAccess().getOperatorAssignment_1_1(), "rule__EinheitMultiplikation__OperatorAssignment_1_1");
			builder.put(grammarAccess.getEinheitMultiplikationAccess().getRechtsAssignment_1_2(), "rule__EinheitMultiplikation__RechtsAssignment_1_2");
			builder.put(grammarAccess.getEinheitPrimaryAccess().getVarrefAssignment_1(), "rule__EinheitPrimary__VarrefAssignment_1");
			builder.put(grammarAccess.getMethodeAccess().getNameAssignment_1(), "rule__Methode__NameAssignment_1");
			builder.put(grammarAccess.getMethodeAccess().getBezeichnungAssignment_3(), "rule__Methode__BezeichnungAssignment_3");
			builder.put(grammarAccess.getMethodeAccess().getAblaufAssignment_5(), "rule__Methode__AblaufAssignment_5");
			builder.put(grammarAccess.getGegebenAccess().getStatementsAssignment_2(), "rule__Gegeben__StatementsAssignment_2");
			builder.put(grammarAccess.getEingabeAccess().getStatementsAssignment_2(), "rule__Eingabe__StatementsAssignment_2");
			builder.put(grammarAccess.getBerechnungAccess().getStatementsAssignment_2(), "rule__Berechnung__StatementsAssignment_2");
			builder.put(grammarAccess.getAusgabeAccess().getStatementsAssignment_2(), "rule__Ausgabe__StatementsAssignment_2");
			builder.put(grammarAccess.getGegebenStatementAccess().getEingabenameAssignment_0(), "rule__GegebenStatement__EingabenameAssignment_0");
			builder.put(grammarAccess.getGegebenStatementAccess().getEinheitAssignment_1_1(), "rule__GegebenStatement__EinheitAssignment_1_1");
			builder.put(grammarAccess.getGegebenStatementAccess().getRefMethodeAssignment_3(), "rule__GegebenStatement__RefMethodeAssignment_3");
			builder.put(grammarAccess.getGegebenStatementAccess().getBezeichnungAssignment_5(), "rule__GegebenStatement__BezeichnungAssignment_5");
			builder.put(grammarAccess.getEingabeStatementAccess().getEingabenameAssignment_0(), "rule__EingabeStatement__EingabenameAssignment_0");
			builder.put(grammarAccess.getEingabeStatementAccess().getEinheitAssignment_2(), "rule__EingabeStatement__EinheitAssignment_2");
			builder.put(grammarAccess.getEingabeStatementAccess().getBezeichnungAssignment_5(), "rule__EingabeStatement__BezeichnungAssignment_5");
			builder.put(grammarAccess.getBerechnungStatementAccess().getBerechnungnameAssignment_0(), "rule__BerechnungStatement__BerechnungnameAssignment_0");
			builder.put(grammarAccess.getBerechnungStatementAccess().getFormelAssignment_2(), "rule__BerechnungStatement__FormelAssignment_2");
			builder.put(grammarAccess.getBerechnungStatementAccess().getBezeichnungAssignment_4(), "rule__BerechnungStatement__BezeichnungAssignment_4");
			builder.put(grammarAccess.getAusgabeStatementAccess().getAusgabenameAssignment_0(), "rule__AusgabeStatement__AusgabenameAssignment_0");
			builder.put(grammarAccess.getAusgabeStatementAccess().getEinheitAssignment_1_1(), "rule__AusgabeStatement__EinheitAssignment_1_1");
			builder.put(grammarAccess.getAusgabeStatementAccess().getBezeichnungAssignment_2_1(), "rule__AusgabeStatement__BezeichnungAssignment_2_1");
			builder.put(grammarAccess.getTextFormelAccess().getTformelAssignment(), "rule__TextFormel__TformelAssignment");
			builder.put(grammarAccess.getNumFormelAccess().getNformelAssignment(), "rule__NumFormel__NformelAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MethGrammarAccess grammarAccess;

	@Override
	protected InternalMethParser createParser() {
		InternalMethParser result = new InternalMethParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MethGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MethGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
